package pjplugin.preferences;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import pjplugin.Activator;
import pjplugin.builder.FileBuilderNature;

import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jface.preference.*;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.ui.IWorkbenchPreferencePage;
import org.eclipse.ui.IWorkbench;



/**
 * This class represents a preference page that
 * is contributed to the Preferences dialog. By 
 * subclassing <samp>FieldEditorPreferencePage</samp>, we
 * can use the field support built into JFace that allows
 * us to create a page that is small and knows how to 
 * save, restore and apply itself.
 * <p>
 * This page is used to modify preferences only. They
 * are stored in the preference store that belongs to
 * the main plug-in class. That way, preferences can
 * be accessed directly via the preference store.
 */

public class PreferencePage
	extends FieldEditorPreferencePage
	implements IWorkbenchPreferencePage {

	private static final String PROJECT_LOGO_LARGE = "icons/parait.png";
	/*
	 * The Strings that we will use
	 * TODO: put them as localized strings
	 */
	private static final String TITLE_STR = "Pyjama Plugin Preference";
	private static final String DESCRIPTION_STR = "Set the preferences for Pyjama Plugin.";
	private static final String SHOW_ERR_MSG_STR = "Show errors in .java source files created by the Pyjama compiler.";
	private static final String USE_DIFF_COMPILER_STR = "Use a custom compiler instead of the default:";
	private static final String COMPILER_STR = "&Compiler jar:";
	private static final String DEBUG_MODE_STR = "Running in debug mode will enable you to view compiler generated intermediate code.";
	
	/**
	 * The String for the allowed runtime extension 
	 */
	private static final String fgRuntimeExtension= "pyjama.jar";
	
	/**
	 * The ID for the Preference page.
	 */
	public static final String ID = Activator.PLUGIN_ID + ".preferences.PyjamaPreferencePage";
	
	/**
	 * The path to the default pyjama.jar file as absolute value
	 */
	private static IPath fgDefaultRuntimeJarPath;
	
	private BooleanFieldEditor fShowErrorsInCompiledPTJava;
	private FileFieldEditor fPTJavaCompilerPathEditor;
	private BooleanFieldEditor fAssociateNature;
	private BooleanFieldEditor fUseCustomCompiler;
	private BooleanFieldEditor fUseCustomRuntime;
	private FileFieldEditor fPTJavaRuntimePathEditor;
	private BooleanFieldEditor fDebugMode;

	public PreferencePage() {
		super(GRID);
		setPreferenceStore(Activator.getDefault().getPreferenceStore());
	}
	
	/**
	 * Creates the field editors. Field editors are abstractions of
	 * the common GUI blocks needed to manipulate various types
	 * of preferences. Each field editor knows how to save and
	 * restore itself.
	 */
	public void createFieldEditors() {

		//  use custom compiler check box
		fUseCustomCompiler = new BooleanFieldEditor(PreferenceConstants.PYJAMA_USE_CUSTOM_COMPILER, 
				USE_DIFF_COMPILER_STR, getFieldEditorParent());
		addField(fUseCustomCompiler);
		
		//  custom compiler field editor
		fPTJavaCompilerPathEditor= new FileFieldEditor(PreferenceConstants.PYJAMA_COMPILER_PATH, 
				COMPILER_STR, getFieldEditorParent());
		
		//  show or hide errors in .java source files generated by the PTJava compiler
		fShowErrorsInCompiledPTJava = new BooleanFieldEditor(PreferenceConstants.PYJAMA_SHOW_HIDDEN_ERRORS,
				SHOW_ERR_MSG_STR, getFieldEditorParent());
		addField(fShowErrorsInCompiledPTJava);
		
		
		// debug mode
		fDebugMode = new BooleanFieldEditor(PreferenceConstants.PYJAMA_DEBUG_MODE, 
				DEBUG_MODE_STR, getFieldEditorParent());
		addField(fDebugMode);

		boolean useCustom= Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.PYJAMA_USE_CUSTOM_COMPILER);
		fPTJavaCompilerPathEditor.setEnabled(useCustom, getFieldEditorParent());
		addField(fPTJavaCompilerPathEditor);
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)
	 */
	public void init(IWorkbench workbench) {
		setTitle(TITLE_STR);
		
		setDescription(DESCRIPTION_STR);
		
		ImageDescriptor desc = Activator.getImageDescriptor(PROJECT_LOGO_LARGE);
        setImageDescriptor(desc);		
	}
	
	/**
	 * Event handler for when a property is changes in the preferences page.
	 * Current implementation updates the preference page widgets as options are selected on the page.
	 * 
	 * @param event The property change event.
	 *
	 * @see org.eclipse.jface.preference.FieldEditorPreferencePage#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
	 */
	@Override
	public void propertyChange(PropertyChangeEvent event) {
		super.propertyChange(event);
		if (event.getProperty().equals("field_editor_value")) {
			Object obj= event.getSource();
			if (obj instanceof BooleanFieldEditor) {
				BooleanFieldEditor bfe= (BooleanFieldEditor)obj;
				if (bfe.equals(fUseCustomCompiler)) {
					fPTJavaCompilerPathEditor.setEnabled(fUseCustomCompiler.getBooleanValue(), getFieldEditorParent());
				}
				else if (bfe.equals(fUseCustomRuntime)) {
					fPTJavaRuntimePathEditor.setEnabled(fUseCustomRuntime.getBooleanValue(), getFieldEditorParent());
				}
			}
		}
	}
	/*
	 * (non-Javadoc)
	 * @see org.eclipse.jface.preference.FieldEditorPreferencePage#performDefaults()
	 */
	@Override
	protected void performDefaults() {
		super.performDefaults();
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.eclipse.jface.preference.FieldEditorPreferencePage#performOk()
	 */
	@Override
	public boolean performOk() {
		boolean ret= super.performOk();
		//Pattern pattern= Pattern.compile(".*/"+fgRuntimeExtension.replace(".", "\\."));
		
		IWorkspaceRoot root= ResourcesPlugin.getWorkspace().getRoot();
		IProject[] projects= root.getProjects();
		for (IProject project : projects) {
			try {
				if (project.hasNature(JavaCore.NATURE_ID) &&
						project.hasNature(FileBuilderNature.NATURE_ID)) {
					IJavaProject jProject= JavaCore.create(project);
					IClasspathEntry[] entries= jProject.getRawClasspath();
					List<IClasspathEntry> newEntryList= new ArrayList<IClasspathEntry>();
				
					for (int i = 0; i < entries.length; i++) {
						if (!entries[i].toString().matches("(.*)pyjama(.*)jar(.*)")) {
							newEntryList.add(entries[i]);
						}
					}
					
					//  add the java runtime library
					IPath path = null;
					path = pjplugin.preferences.PreferencePage.getFgDefaultRuntimeJarPath();

					newEntryList.add(JavaCore.newLibraryEntry(path, null, null));
	
					IClasspathEntry[] updatedEntries= new IClasspathEntry[newEntryList.size()];
					newEntryList.toArray(updatedEntries);
					
					jProject.setRawClasspath(updatedEntries, null);
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		return ret;
	}
	
	/**
	 * Loads the default pyjama.jar file from the plug-in and puts a copy into the workspace root directory.
	 * If PTRuntime.jar already exists in the workspace root, the jar file is overwritten.
	 * Stores the path to the created runtime jar file.
	 * @throws IOException If the PTRuntime.jar file cannot be found in the plug-in, or written to in the workspace root.
	 */
	public static void loadRuntimeJarFile() throws IOException {
		Path path= new Path("/" + fgRuntimeExtension);
		
		URL installURL= Platform.getBundle(Activator.PLUGIN_ID).getEntry(path.toString());
		if (installURL == null)
			return;
		
		URL localURL= FileLocator.toFileURL(installURL);
		
		File srcFile= new File(localURL.getFile());
		File destFile= null;
		
		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
		
		IPath destFilePath = workspaceRoot.getLocation().append(path);
		destFile= new File(destFilePath.toString());
		destFile.createNewFile();
		
		//  overwrite the dest file
		FileInputStream input= new FileInputStream(srcFile);
		FileOutputStream output= new FileOutputStream(destFile);
		
		byte[] buffer= new byte[65536];
		int length;
		while ((length= input.read(buffer)) > 0) {
			output.write(buffer, 0, length);
		}
		
		output.close();
		input.close();
		
		fgDefaultRuntimeJarPath = destFilePath;
	}
	
	/**
	 * Returns the path to the default Parallel Task runtime library (PTRuntime.jar), which is created in {@link PTJavaPreferencePage#loadRuntimeJarFile()}.
	 * @return The path to the default PTRuntime.jar file. 
	 */
	public static IPath getDefaultRuntimeJarPath() {
		if(null == fgDefaultRuntimeJarPath){
			String temp = PreferenceManager.getInstance().getJarPath();
			Path path = new Path(temp);
			fgDefaultRuntimeJarPath = path.makeAbsolute();
		}
		return fgDefaultRuntimeJarPath;
	}

	public static IPath getFgDefaultRuntimeJarPath() {
		if(null == fgDefaultRuntimeJarPath){
			String temp = PreferenceManager.getInstance().getJarPath();
			Path path = new Path(temp);
			fgDefaultRuntimeJarPath = path.makeAbsolute();
		}
		return fgDefaultRuntimeJarPath;
	}

	public static void setFgDefaultRuntimeJarPath(IPath fgDefaultRuntimeJarPath) {
		PreferencePage.fgDefaultRuntimeJarPath = fgDefaultRuntimeJarPath;
	}

}